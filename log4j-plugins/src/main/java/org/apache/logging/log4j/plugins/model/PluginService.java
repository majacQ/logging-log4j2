/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache license, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the license for the specific language governing permissions and
 * limitations under the license.
 */
package org.apache.logging.log4j.plugins.model;

import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;

/**
 * Provides {@linkplain PluginEntry plugin metadata} for a module. Implementation classes are typically generated by
 * {@code PluginProcessor} in log4j-plugin-processor.
 *
 * @since 3.0.0
 */
public abstract class PluginService {

    private final Map<String, PluginNamespace> namespaces = new LinkedHashMap<>();

    public PluginService() {
        PluginEntry[] entries = getEntries();
        ClassLoader classLoader = getClass().getClassLoader();
        for (PluginEntry entry : entries) {
            final String namespace = entry.getNamespace();
            namespaces.computeIfAbsent(namespace.toLowerCase(Locale.ROOT), key -> new PluginNamespace(key, namespace))
                    .merge(entry.getKey(), new PluginType<>(entry, classLoader));
        }
    }

    public abstract PluginEntry[] getEntries();

    public Map<String, PluginNamespace> getNamespaces() {
        return namespaces;
    }

    public PluginNamespace getNamespace(String category) {
        return namespaces.get(category.toLowerCase(Locale.ROOT));
    }

    public int size() {
        return namespaces.values()
                .stream()
                .mapToInt(PluginNamespace::size)
                .sum();
    }

}
